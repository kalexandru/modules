nextflow_process {

    name "Test Process DREAM_DIFFERENTIAL"
    script "../main.nf"
    process "DREAM_DIFFERENTIAL"
    config "./nextflow.config"

    tag "modules"
    tag "models"
    tag "dge"
    tag "dream"
    tag "dream/differential"

    test("Mus musculus - expression table - contrasts") {

        when {
            process {
                """
                // contrast data + counts + samplesheet
                input[0] = Channel.of(
                    [
                        [
                            id: 'test',
                            contrast_id: 'treatment_mCherry_hND6',
                            contrast_variable: 'treatment',
                            contrast_reference: 'mCherry',
                            contrast_target: 'hND6',
                            blocking_factors: null
                        ],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/mus_musculus/rnaseq_expression/SRP254919.samplesheet.csv", checkIfExists: true),
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/mus_musculus/rnaseq_expression/SRP254919.salmon.merged.gene_counts.top1000cov.tsv", checkIfExists: true)
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Mus musculus - expression table - contrasts + blocking factors") {

        when {
            process {
                """
                // contrast data + counts + samplesheet
                input[0] = Channel.of(
                    [
                        [
                            id: 'test-bf',
                            contrast_id: 'treatment_mCherry_hND6',
                            contrast_variable: 'treatment',
                            contrast_reference: 'mCherry',
                            contrast_target: 'hND6',
                            blocking_factors: ['sample_number']
                        ],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/mus_musculus/rnaseq_expression/SRP254919.samplesheet.csv", checkIfExists: true),
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/mus_musculus/rnaseq_expression/SRP254919.salmon.merged.gene_counts.top1000cov.tsv", checkIfExists: true)
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Mus musculus - expression table - contrasts + blocking factors stub") {

        options '-stub'
        when {
            process {
                """
                // contrast data + counts + samplesheet
                input[0] = Channel.of(
                    [
                        [
                            id: 'test-stub',
                            contrast_id: 'treatment_mCherry_hND6',
                            contrast_variable: 'treatment',
                            contrast_reference: 'mCherry',
                            contrast_target: 'hND6',
                            blocking_factors: ['sample_number']
                        ],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/mus_musculus/rnaseq_expression/SRP254919.samplesheet.csv", checkIfExists: true),
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/mus_musculus/rnaseq_expression/SRP254919.salmon.merged.gene_counts.top1000cov.tsv", checkIfExists: true)
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}

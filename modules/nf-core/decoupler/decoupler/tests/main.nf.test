nextflow_process {

    name "Test Process DECOUPLER"
    script "../main.nf"
    config "./nextflow.config"
    process "DECOUPLER"

    tag "modules"
    tag "modules_nfcore"
    tag "decoupler"
    tag "decoupler/decoupler"

    test("decoupler_test") {

        when {
            process {
                """
                input[0] = [
                    [ id: 'test' ],
                    file(params.test_data['generic']['tsv']['expression'], checkIfExists: true)
                ]
                input[1] = [
                    file(params.test_data['generic']['tsv']['network'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("progeny") {

        when {
            process {
                """
                input[0] = [
                    [ id: 'progeny' ],
                    file("https://github.com/atrigila/test-datasets/raw/progeny/data/delete_me/decoupler/progeny/pbmc3k_1000rows.tsv", checkIfExists: true)
                ]
                input[1] = [
                    file("https://github.com/atrigila/test-datasets/raw/progeny/data/delete_me/decoupler/progeny/progeny_data.tsv", checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("decoupler stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id: 'test' ],
                    file(params.test_data['generic']['tsv']['expression'], checkIfExists: true)
                ]
                input[1] = [
                    file(params.test_data['generic']['tsv']['network'], checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}
